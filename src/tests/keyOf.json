[
  {
    "name": "keyOf can be used as string",
    "schema": {
      "id": "string",
      "valueA": "number",
      "valueB": { "$keyOf": [] }
    },
    "validData": [
      { "id": "a", "valueA": 4, "valueB": "id" },
      { "id": "a", "valueA": 4, "valueB": "valueA" },
      { "id": "a", "valueA": 4, "valueB": "valueB" }
    ],
    "invalidData": [
      { "id": "a", "valueA": 4, "valueB": "" },
      { "id": "a", "valueA": 4, "valueB": {} },
      { "id": "a", "valueA": 4, "valueB": "idc" }
    ]
  },
  {
    "name": "keys are checked on the input data, not the validation",
    "schema": {
      "id": "string",
      "valueA": ["?", "number"],
      "valueB": { "$keyOf": [] }
    },
    "validData": [
      { "id": "a", "valueA": 4, "valueB": "id" },
      { "id": "a", "valueB": "id" },
      { "id": "a", "valueA": 4, "valueB": "valueA" },
      { "id": "a", "valueA": 4, "valueB": "valueB" }
    ],
    "invalidData": [
      { "id": "a",  "valueB": "valueA" },
      {}
    ]
  },
  {
    "name": "keys are checked on the input data, not the validation 2",
    "schema": {
      "id": ["?", "string"],
      "valueA": ["?", "number"],
      "valueB": ["?" ,{ "$keyOf": [] }]
    },
    "validData": [
      { "id": "a", "valueA": 4, "valueB": "id" },
      { "id": "a", "valueB": "id" },
      { "id": "a", "valueA": 4, "valueB": "valueA" },
      { "id": "a", "valueA": 4, "valueB": "valueB" },
      { },
      {"valueB": "valueB"},
      {"valueA": 5, "valueB": "valueB"}
    ],
    "invalidData": [
      { "id": "a",  "valueB": "valueA" },
      { "valueB": "id" }
    ]
  },
  {
    "name": "can restrict the keys of a map to be one of the keys of the root object on the input",
    "schema": {
      "keyA": "number",
      "keyB": "number",
      "keyC": ["number", "?"],
      "myRes": { "$map": "string", "key": { "$keyOf": [] } }
    },
    "validData": [
      { "keyA": 1, "keyB": 2, "myRes": { "keyA": "a", "keyB": "b" } },
      { "keyA": 1, "keyB": 2, "keyC": 3, "myRes": { "keyA": "a", "keyC": "b" } }
    ],
    "invalidData": [
      { "keyA": 1, "keyB": 2, "myRes": { "keyA": "a", "keyC": "b" } },
      { "keyA": 1, "keyB": 2, "myRes": { "keyA": "a", "keyX": "b" } }
    ]
  },
  {
    "name": "can restrict the keys of a map be one of the keys on an object under root on the input",
    "schema": {
      "keyA": { "x": "number", "y": ["?", "number"] },
      "keyB": "number",
      "keyC": ["number", "?"],
      "myRes": { "$map": "string", "key": { "$keyOf": ["keyA"] } }
    },
    "validData": [
      {
        "keyA": { "x": 1, "y": 2 },
        "keyB": 2,
        "myRes": { "x": "one", "y": "two" }
      },
      { "keyA": { "x": 1, "y": 2 }, "keyB": 2, "myRes": { "x": "one" } }
    ],
    "invalidData": [
      { "keyA": { "x": 1 }, "keyB": 2, "myRes": { "x": "one", "y": "two" } },
      {
        "keyA": { "x": 1, "y": 2 },
        "keyB": 2,
        "myRes": { "keyA": "a", "keyB": "b" }
      }
    ]
  },
  {
    "name" : "Can specify a keyof a map",
    "schema": {
      "refMap": {"$map":"string"},
      "primaryElement": {"$keyOf": ["refMap"]}
    },
    "validData": [
      {
        "refMap": {"myKey":"it is","yourKey":"it isnt"},
        "primaryElement": "yourKey"
      }
    ],
    "invalidData": [
      {
        "refMap": {"myKey":"it is","yourKey":"it isnt"},
        "primaryElement": "ourKey"
      }
    ]
  },  {
    "name" : "Can specify a keyof a map indirectly",
    "schema":       {
        "keyA": {
            "$map": "string",
            "key": {"$keyOf": ["keyB"]}
        },
        "keyB" : {
            "minLength": 4,
            "$map":"number"
        }, 
        "myRes": {
            "$map": "string",
            "key": {
                "$keyOf": [
                    "keyA"
                ]
            }
        }
    },
    "validData": [
      {
        "keyB": { "a": 1, "b":2, "c":5, "d": 7 },
        "keyA": { "a": "x", "b":"y", "c":"z" },
        "myRes": { "a": "x", "b":"y" }
      }
    ],
    "invalidData": [
      {
        "refMap": {"myKey":"it is","yourKey":"it isnt"},
        "primaryElement": "ourKey"
      }
    ]
  },
  {
    "name": "Keys specified deeper than the 2 levels",
    "schema": { 
      "ourValue":{
        "yourValue": {
          "abc":"string",
          "CBA":"number"
        }
      },
      "myValue": { "$keyOf": ["ourValue", "yourValue"] } 
    },
    "validData": [
      {
        "ourValue": {
          "yourValue":{"abc":"hello", "CBA":4 }
        },
        "myValue":"abc"
      }
    ],
    "invalidData": [
      "abc",
      {
        "ourValue": {
          "yourValue":{"abc":"hello", "CBA":4 }
        },
        "myValue":"hello"
      }
    ]
  },
  {
    "name": "Speicifying a non object keys will result in an invalid schema",
    "invalidSchema": {"yourValue":"number", "myValue": { "$keyOf": ["yourValue"] } },
    "validData": [],
    "invalidData": ["abc"]
  },
  {
    "name": "Speicifying non existent keys will result in an invalid schema 1",
    "invalidSchema": { "myValue": { "$keyOf": ["myValue", "yourValue"] } },
    "validData": [],
    "invalidData": ["abc"]
  },
  {
    "name": "Speicifying non existent keys will result in an invalid schema at any depth",
    "invalidSchema": { "myValue": { "$keyOf": ["nest", "ted", "obbi"] }, "nest": {"ted": {"object": {}}} },
    "validData": [],
    "invalidData": [{"myValue": "any", "nest": {"ted": {"object": {}}}}]
  },
  {
    "name": "Schema referencing a non existing key is invalid",
    "invalidSchema": {
      "keyA": "number",
      "keyB": { "$keyOf": ["axz"] }
    },
    "invalidData": [{ "keyA": 2 }, { "keyA": 4, "keyB": "keyA" }]
  }
]
