{
  "$schema": "./schema.json",
  "$types": {
    "$customType": { "$keyOf": ["$types"] },
    "$customTypeDefObject": {
      "$keyOf": ["$types"],
      "valueType": ["$objectType", "$oneOfTypeObject"]
    },
    "$customTypeDef": {
      "\\$types": [
        "?",
        {
          "key": { "$string": { "regex": "^\\$([a-zA-Z0-9_]{1,128})$" } },
          "$map": "$valueTypes"
        }
      ]
    },
    "$optionalPositiveInteger": [
      "?",
      { "$number": { "min": 0, "integer": true } }
    ],
    "$simpleTypes": {
      "$enum": ["string", "boolean", "number", "integer", "null", "?", "any"]
    },
    "$simpleTypesNoOptional": {
      "$enum": ["string", "boolean", "number", "integer", "null", "any"]
    },
    "$enumType": {
      "name": ["?", "string"],
      "description": ["?", "string"],
      "\\$enum": { "minLength": 1, "$array": "string" }
    },
    "$objectType": {
      "key": { "$string": { "regex": "^(?!\\$).*" } },
      "$map": "$valueTypesNoOptional"
    },
    "$arrayType": {
      "name": ["?", "string"],
      "description": ["?", "string"],
      "minLength": "$optionalPositiveInteger",
      "maxLength": "$optionalPositiveInteger",
      "\\$array": "$valueTypesNoOptional"
    },  

    "$stringType": {
      "name": ["?", "string"],
      "description": ["?", "string"],
      "\\$string": [
        {
          "minLength": "$optionalPositiveInteger",
          "maxLength": "$optionalPositiveInteger"
        },
        { "regex": ["?", "string"] }
      ]
    },

    "$numberType": {
      "name": ["?", "string"],
      "description": ["?", "string"],
      "\\$number": {
        "min": ["?", "number"],
        "max": ["?", "number"],
        "integer": ["?", "boolean"]
      }
    },



    "$mapType": {
      "name": ["?", "string"],
      "description": ["?", "string"],
      "minLength": "$optionalPositiveInteger",
      "maxLength": "$optionalPositiveInteger",
      "key": ["?", "$stringType", "$enumType", "$keyOfType", "$customType"],
      "keySpecificType": ["?", { "$map": "$valueTypes" }, "$customTypeDefObject"],
      "\\$map": "$valueTypesNoOptional"
    },
    
    "$keyOfType": {
      "valueType": ["?", "$valueTypes" ],
      "\\$keyOf": {"$propertyPath":{ "onlyObjects": true }}
    },
    "$propertyPathType": {
      "\\$propertyPath": { "onlyObjects": ["?", "boolean"] }
    },
    "$literalType": { "\\$literal": ["string", "number","boolean", "null"] },
    "$andType": {      
      "name": ["?", "string"],
      "description": ["?", "string"],
      "\\$and": {
        "$array": ["$objectType", "$customTypeDefObject", "$oneOfTypeObject"]
      }
    },
    "$tupleType": { "\\$tuple": { "$array": "$valueTypes", "minLength": 1 } },   
    "$valueType": [
      "$simpleTypes",
      "$enumType",
      "$objectType",
      "$arrayType",
      "$stringType",
      "$numberType",
      "$mapType",
      "$keyOfType",
      "$literalType",
      "$andType",
      "$customType",
      "$tupleType",
      "$propertyPathType",
      "$oneOfType"
    ],
    "$valueTypes": [{ "$array": "$valueType", "minLength": 1 }, "$valueType"],

    "$valueTypeNoOptional": [
        "$simpleTypesNoOptional",
        "$enumType",
        "$objectType",
        "$arrayType",
        "$stringType",
        "$numberType",
        "$mapType",
        "$keyOfType",
        "$literalType",
        "$andType",
        "$customType",
        "$tupleType",
        "$propertyPathType",
        "$oneOfType"
      ],
    "$valueTypesNoOptional": [{ "$array": "$valueType", "minLength": 1 }, "$valueTypeNoOptional"],
    "$oneOfType" : {
      "\\$oneOf": { "$array": "$valueType", "minLength": 1 }
    },
    "$oneOfTypeObject" : {
      "\\$oneOf": { "$array": ["$objectType", "$customType"], "minLength": 1 }
    }
  },
  "$oneOf": [
    "$simpleTypesNoOptional",
    "$enumType",
    "$literalType",
    {
      "$map": "$valueTypes",
      "key": { "$string": { "regex": "(^(?!\\$).*)" } },
      "keySpecificType": "$customTypeDef"
    },
    { "$and": ["$customTypeDef", "$arrayType"] },
    { "$and": ["$customTypeDef", "$stringType"] },
    { "$and": ["$customTypeDef", "$numberType"] },
    { "$and": ["$customTypeDef", "$mapType"] },
    { "$and": ["$customTypeDef", "$andType"] },
    { "$and": ["$customTypeDef", "$tupleType"] },
    { "$and": ["$customTypeDef", "$oneOfType"] },
    { "minLength": 1, "$array":  "$valueType" }
  ]
}
